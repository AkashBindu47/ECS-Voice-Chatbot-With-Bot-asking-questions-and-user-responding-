# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLiqErkfqmi-A9XDmGehKG9EMb7f82xu
"""

import streamlit as st
from gtts import gTTS
import tempfile
import io
import base64
import speech_recognition as sr
from audio_recorder_streamlit import audio_recorder
from datetime import datetime

# Initialize the SpeechRecognition recognizer
recognizer = sr.Recognizer()

# Streamlit app title
st.title("ECS Voice Chatbot Streamlit App")

# Function to convert text to speech and save it to a temporary file
def text_to_speech(text):
    tts = gTTS(text)
    temp_audio_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    tts.save(temp_audio_file.name)
    return temp_audio_file.name

# Questions the bot will ask
questions = [
    "Tell me about yourself.",
    "Reason for job switching.",
    "What specific skills or expertise do you bring to this role that would benefit our organization?",
    "Why do you want to work for this company?"
]

# Initialize session state variables
if 'current_question_index' not in st.session_state:
    st.session_state.current_question_index = 0
if 'responses' not in st.session_state:
    st.session_state.responses = []

# Function to handle bot's questions
def ask_question(question):
    # Convert the question to speech and play it
    audio_file_path = text_to_speech(question)
    audio = open(audio_file_path, 'rb').read()
    st.audio(audio, format="audio/mp3")

# User responds
audio_bytes = audio_recorder(key=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
if st.button("New Question"):
    if st.session_state.current_question_index < len(questions):
        current_question = questions[st.session_state.current_question_index]
        ask_question(current_question)
        st.session_state.current_question_index += 1
    else:
        st.write("All questions have been asked. Thank you for the responses.")

    if audio_bytes:
        try:
            # Save the audio as a temporary WAV file
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_audio_file:
                temp_audio_file.write(audio_bytes)

            # Recognize the audio and transcribe it to text
            with sr.AudioFile(temp_audio_file.name) as source:
                audio_data = recognizer.record(source)
                audio_text = recognizer.recognize_google(audio_data)

                # Save the user's response to session state
                st.session_state.responses.append(audio_text)

                # Display the user's response
                st.write("User's Response:")
                st.write(audio_text)
        except sr.UnknownValueError:
            st.error("Sorry, I could not understand the audio.")
        except sr.RequestError:
            st.error("Could not request results. Check your network connection.")

